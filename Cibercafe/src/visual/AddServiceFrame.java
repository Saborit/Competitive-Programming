/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import services.BrowseService;
import services.BurnService;
import services.PrintService;
import services.Service;
import users.NotPermitedServiceException;
import users.User;
import utils.Utils;

public class AddServiceFrame extends javax.swing.JFrame {
    private MainFrame caller;
    private String text = null;
    private DefaultListModel usersListModel;
    
    /**
     * Creates new form NewServiceFrame
     * @param mainFrame
     */
    public AddServiceFrame(MainFrame mainFrame) {
        initComponents();
        
        caller = mainFrame;
        
        String[] tmp = {"Punto", "L치ser"};
        qualityComboBox.setModel(new DefaultComboBoxModel<>(tmp));
        
        String[] tmp2 = {"8x", "12x", "16x", "24x"};
        speedComboBox.setModel(new DefaultComboBoxModel<>(tmp2));
        
        acceptButton.setEnabled(false);
        
        enableBrowseGroup(false);
        enableBurnGroup(false);
        enablePrintGroup(false);
        
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(browseRadioButton);
        buttonGroup.add(printRadioButton);
        buttonGroup.add(burnRadioButton);
        
        usersListModel = new DefaultListModel();                   
        usersList.setModel(usersListModel);
        
        for(Object i: caller.main.getCibercafe().getUsersInMaqs())
            if( i!= null )
                usersListModel.addElement(i);
        
        setTitle("A침adir un Servicio");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        hourTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersList = new javax.swing.JList();
        acceptButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        hourFTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        kbTextField = new javax.swing.JTextField();
        intTextButton = new javax.swing.JButton();
        qualityComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        megaBytesTextField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        browseRadioButton = new javax.swing.JRadioButton();
        printRadioButton = new javax.swing.JRadioButton();
        burnRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        speedComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Hora Inicial:");

        hourTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourTextFieldActionPerformed(evt);
            }
        });
        hourTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hourTextFieldKeyReleased(evt);
            }
        });

        usersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                usersListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(usersList);

        acceptButton.setText("Agregar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Kilobytes:");

        hourFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hourFTextFieldKeyReleased(evt);
            }
        });

        jLabel4.setText("Hora Final:");

        kbTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbTextFieldActionPerformed(evt);
            }
        });
        kbTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                kbTextFieldKeyReleased(evt);
            }
        });

        intTextButton.setText("Introducir Texto");
        intTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intTextButtonActionPerformed(evt);
            }
        });

        qualityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        qualityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                qualityComboBoxItemStateChanged(evt);
            }
        });

        jLabel5.setText("Velocidad:");

        jLabel6.setText("Megabytes:");

        megaBytesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                megaBytesTextFieldActionPerformed(evt);
            }
        });
        megaBytesTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                megaBytesTextFieldKeyReleased(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        browseRadioButton.setText("Navegaci칩n");
        browseRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                browseRadioButtonStateChanged(evt);
            }
        });

        printRadioButton.setText("Impresi칩n");
        printRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                printRadioButtonStateChanged(evt);
            }
        });

        burnRadioButton.setText("Quemado");
        burnRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                burnRadioButtonStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Sans Serif", 1, 12)); // NOI18N
        jLabel2.setText("Precio:");

        speedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("Seleccione un Usuario:");

        priceLabel.setFont(new java.awt.Font("Sans Serif", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(kbTextField)
                                        .addComponent(hourFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(browseRadioButton)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(printRadioButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(qualityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(intTextButton))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(megaBytesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(speedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(burnRadioButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(acceptButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(cancelButton)))
                                .addGap(33, 33, 33))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(printRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qualityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(intTextButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(browseRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(burnRadioButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(kbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(hourFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(megaBytesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(speedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(acceptButton)
                            .addComponent(cancelButton)
                            .addComponent(jLabel2)
                            .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hourTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourTextFieldActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        User user = (User)usersList.getSelectedValue();
        
        try {
            user.addService(buildServiceFromFrameData());
            dispose();  
        } 
        catch (NotPermitedServiceException ex) {
            caller.main.launchErrorDialog(this, ex);
        }                    
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void megaBytesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_megaBytesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_megaBytesTextFieldActionPerformed

    private void kbTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kbTextFieldActionPerformed

    private void hourTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourTextFieldKeyReleased
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_hourTextFieldKeyReleased

    private void kbTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kbTextFieldKeyReleased
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_kbTextFieldKeyReleased

    private void hourFTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourFTextFieldKeyReleased
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_hourFTextFieldKeyReleased

    private void megaBytesTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_megaBytesTextFieldKeyReleased
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_megaBytesTextFieldKeyReleased

    private void intTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intTextButtonActionPerformed
        caller.main.launchIntTextDialog(this);
    }//GEN-LAST:event_intTextButtonActionPerformed

    private void browseRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_browseRadioButtonStateChanged
        enableBrowseGroup(browseRadioButton.isSelected());
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_browseRadioButtonStateChanged

    private void printRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_printRadioButtonStateChanged
        enablePrintGroup(printRadioButton.isSelected());
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_printRadioButtonStateChanged

    private void burnRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_burnRadioButtonStateChanged
        enableBurnGroup(burnRadioButton.isSelected());
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());    
    }//GEN-LAST:event_burnRadioButtonStateChanged

    private void usersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_usersListValueChanged
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_usersListValueChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void speedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedComboBoxActionPerformed
        acceptButton.setEnabled(canEnableFinalize());
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_speedComboBoxActionPerformed

    private void qualityComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_qualityComboBoxItemStateChanged
        calcPrice(canEnableFinalize());
    }//GEN-LAST:event_qualityComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddServiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddServiceFrame frame = new AddServiceFrame(null);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JRadioButton browseRadioButton;
    private javax.swing.JRadioButton burnRadioButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField hourFTextField;
    private javax.swing.JTextField hourTextField;
    private javax.swing.JButton intTextButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kbTextField;
    private javax.swing.JTextField megaBytesTextField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JRadioButton printRadioButton;
    private javax.swing.JComboBox<String> qualityComboBox;
    private javax.swing.JComboBox<String> speedComboBox;
    private javax.swing.JList usersList;
    // End of variables declaration//GEN-END:variables
    
    public void setText(String str){
        this.text = str;
    }
    
    public String getText(){
        return text;
    }
    
    public JButton getAcceptButton(){
        return acceptButton;
    } 
    
    private void enableBurnGroup(boolean opt){
        megaBytesTextField.setEnabled(opt);
        speedComboBox.setEnabled(opt);
    }
    
    private void enablePrintGroup(boolean opt){
        intTextButton.setEnabled(opt);
        qualityComboBox.setEnabled(opt);
    }
    
    private void enableBrowseGroup(boolean opt){
        hourFTextField.setEnabled(opt);
        kbTextField.setEnabled(opt);    
    }
    
    public boolean canEnableFinalize(){
        if( usersList.isSelectionEmpty() )
            return false;
        
        int initHour = 0;
        
        try {
            initHour = Integer.parseInt(hourTextField.getText());
            if( initHour < 1  || initHour > 24 )
                return false;
        } 
        catch (NumberFormatException nfe) {
            return false;
        }
                
        if( browseRadioButton.isSelected() ){
            int finalHour;
            boolean OK = Utils.isNonNegativeInteger(kbTextField.getText());
            
            try{
                finalHour = Integer.parseInt(hourFTextField.getText());
                if( finalHour < 1  || finalHour > 24 )
                    return false;
                return OK && finalHour >= initHour; 
            }
            catch(NumberFormatException nfe){
                return false;
            }
        }
        else if( printRadioButton.isSelected() )
            return text != null && !"".equals(text);
        else
            return speedComboBox.getSelectedIndex() != -1 && Utils.isNonNegativeInteger(megaBytesTextField.getText());
    }
    
    private Service buildServiceFromFrameData(){
        User user = (User)usersList.getSelectedValue();
        Service service;
               
        int initHour = Integer.parseInt(hourTextField.getText());
        int maq = user.getMaq();
        
        if( browseRadioButton.isSelected() ){
            service = new BrowseService(maq, Integer.parseInt(kbTextField.getText()),
                        initHour, Integer.parseInt(hourFTextField.getText()));
        }
        else if( printRadioButton.isSelected() ){
            service = new PrintService(maq, initHour, text, qualityComboBox.getSelectedIndex() == 1);
        }
        else{
            service = new BurnService(maq, initHour, getSpeedFromComboBox(),
                        Integer.parseInt(megaBytesTextField.getText()));
        }
        
        return service;
    }
    
    public void calcPrice(boolean opt){
        if( opt ){
            Service service = buildServiceFromFrameData();
            
            priceLabel.setText(String.format("%.2f", service.calcPrice((User)usersList.getSelectedValue())));
        }
        else{
            priceLabel.setText("");
        }            
    }

    byte getSpeedFromComboBox(){
        String str = (String)speedComboBox.getSelectedItem();
        str = str.substring(0, str.length() - 1);
        
        return Byte.parseByte(str);
    }
}
